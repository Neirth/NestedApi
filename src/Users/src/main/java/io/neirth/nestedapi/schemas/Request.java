/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.neirth.nestedapi.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7279538041923112768L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Request\",\"namespace\":\"io.neirth.nestedapi.schemas\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"UserObj\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"surname\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"password\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"telephone\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"birthday\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"addressInformation\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"invoice\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"InvoiceObj\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"creationDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"deliveryAddress\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"deliveryPostcode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"deliveryCountry\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"deliveryCurrency\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"deliveryAddressInformation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"products\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProductObj\",\"fields\":[{\"name\":\"productName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"productPrice\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"productAmount\",\"type\":[\"null\",\"int\"],\"default\":null}]}}],\"default\":null}]}],\"default\":null},{\"name\":\"token\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Request> ENCODER =
      new BinaryMessageEncoder<Request>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Request> DECODER =
      new BinaryMessageDecoder<Request>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Request> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Request> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Request> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Request>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Request to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Request from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Request instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Request fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Long id;
   private java.lang.CharSequence email;
   private io.neirth.nestedapi.schemas.UserObj user;
   private io.neirth.nestedapi.schemas.InvoiceObj invoice;
   private java.lang.CharSequence token;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Request() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param email The new value for email
   * @param user The new value for user
   * @param invoice The new value for invoice
   * @param token The new value for token
   */
  public Request(java.lang.Long id, java.lang.CharSequence email, io.neirth.nestedapi.schemas.UserObj user, io.neirth.nestedapi.schemas.InvoiceObj invoice, java.lang.CharSequence token) {
    this.id = id;
    this.email = email;
    this.user = user;
    this.invoice = invoice;
    this.token = token;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return email;
    case 2: return user;
    case 3: return invoice;
    case 4: return token;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: email = (java.lang.CharSequence)value$; break;
    case 2: user = (io.neirth.nestedapi.schemas.UserObj)value$; break;
    case 3: invoice = (io.neirth.nestedapi.schemas.InvoiceObj)value$; break;
    case 4: token = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public io.neirth.nestedapi.schemas.UserObj getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(io.neirth.nestedapi.schemas.UserObj value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'invoice' field.
   * @return The value of the 'invoice' field.
   */
  public io.neirth.nestedapi.schemas.InvoiceObj getInvoice() {
    return invoice;
  }


  /**
   * Sets the value of the 'invoice' field.
   * @param value the value to set.
   */
  public void setInvoice(io.neirth.nestedapi.schemas.InvoiceObj value) {
    this.invoice = value;
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public java.lang.CharSequence getToken() {
    return token;
  }


  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(java.lang.CharSequence value) {
    this.token = value;
  }

  /**
   * Creates a new Request RecordBuilder.
   * @return A new Request RecordBuilder
   */
  public static io.neirth.nestedapi.schemas.Request.Builder newBuilder() {
    return new io.neirth.nestedapi.schemas.Request.Builder();
  }

  /**
   * Creates a new Request RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Request RecordBuilder
   */
  public static io.neirth.nestedapi.schemas.Request.Builder newBuilder(io.neirth.nestedapi.schemas.Request.Builder other) {
    if (other == null) {
      return new io.neirth.nestedapi.schemas.Request.Builder();
    } else {
      return new io.neirth.nestedapi.schemas.Request.Builder(other);
    }
  }

  /**
   * Creates a new Request RecordBuilder by copying an existing Request instance.
   * @param other The existing instance to copy.
   * @return A new Request RecordBuilder
   */
  public static io.neirth.nestedapi.schemas.Request.Builder newBuilder(io.neirth.nestedapi.schemas.Request other) {
    if (other == null) {
      return new io.neirth.nestedapi.schemas.Request.Builder();
    } else {
      return new io.neirth.nestedapi.schemas.Request.Builder(other);
    }
  }

  /**
   * RecordBuilder for Request instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Request>
    implements org.apache.avro.data.RecordBuilder<Request> {

    private java.lang.Long id;
    private java.lang.CharSequence email;
    private io.neirth.nestedapi.schemas.UserObj user;
    private io.neirth.nestedapi.schemas.UserObj.Builder userBuilder;
    private io.neirth.nestedapi.schemas.InvoiceObj invoice;
    private io.neirth.nestedapi.schemas.InvoiceObj.Builder invoiceBuilder;
    private java.lang.CharSequence token;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.neirth.nestedapi.schemas.Request.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = io.neirth.nestedapi.schemas.UserObj.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[3], other.invoice)) {
        this.invoice = data().deepCopy(fields()[3].schema(), other.invoice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasInvoiceBuilder()) {
        this.invoiceBuilder = io.neirth.nestedapi.schemas.InvoiceObj.newBuilder(other.getInvoiceBuilder());
      }
      if (isValidValue(fields()[4], other.token)) {
        this.token = data().deepCopy(fields()[4].schema(), other.token);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Request instance
     * @param other The existing instance to copy.
     */
    private Builder(io.neirth.nestedapi.schemas.Request other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[3], other.invoice)) {
        this.invoice = data().deepCopy(fields()[3].schema(), other.invoice);
        fieldSetFlags()[3] = true;
      }
      this.invoiceBuilder = null;
      if (isValidValue(fields()[4], other.token)) {
        this.token = data().deepCopy(fields()[4].schema(), other.token);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public io.neirth.nestedapi.schemas.UserObj getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder setUser(io.neirth.nestedapi.schemas.UserObj value) {
      validate(fields()[2], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.neirth.nestedapi.schemas.UserObj.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(io.neirth.nestedapi.schemas.UserObj.newBuilder(user));
        } else {
          setUserBuilder(io.neirth.nestedapi.schemas.UserObj.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.neirth.nestedapi.schemas.Request.Builder setUserBuilder(io.neirth.nestedapi.schemas.UserObj.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoice' field.
      * @return The value.
      */
    public io.neirth.nestedapi.schemas.InvoiceObj getInvoice() {
      return invoice;
    }


    /**
      * Sets the value of the 'invoice' field.
      * @param value The value of 'invoice'.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder setInvoice(io.neirth.nestedapi.schemas.InvoiceObj value) {
      validate(fields()[3], value);
      this.invoiceBuilder = null;
      this.invoice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'invoice' field has been set.
      * @return True if the 'invoice' field has been set, false otherwise.
      */
    public boolean hasInvoice() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'invoice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.neirth.nestedapi.schemas.InvoiceObj.Builder getInvoiceBuilder() {
      if (invoiceBuilder == null) {
        if (hasInvoice()) {
          setInvoiceBuilder(io.neirth.nestedapi.schemas.InvoiceObj.newBuilder(invoice));
        } else {
          setInvoiceBuilder(io.neirth.nestedapi.schemas.InvoiceObj.newBuilder());
        }
      }
      return invoiceBuilder;
    }

    /**
     * Sets the Builder instance for the 'invoice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.neirth.nestedapi.schemas.Request.Builder setInvoiceBuilder(io.neirth.nestedapi.schemas.InvoiceObj.Builder value) {
      clearInvoice();
      invoiceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'invoice' field has an active Builder instance
     * @return True if the 'invoice' field has an active Builder instance
     */
    public boolean hasInvoiceBuilder() {
      return invoiceBuilder != null;
    }

    /**
      * Clears the value of the 'invoice' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder clearInvoice() {
      invoice = null;
      invoiceBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public java.lang.CharSequence getToken() {
      return token;
    }


    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder setToken(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.token = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.schemas.Request.Builder clearToken() {
      token = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Request build() {
      try {
        Request record = new Request();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (userBuilder != null) {
          try {
            record.user = this.userBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("user"));
            throw e;
          }
        } else {
          record.user = fieldSetFlags()[2] ? this.user : (io.neirth.nestedapi.schemas.UserObj) defaultValue(fields()[2]);
        }
        if (invoiceBuilder != null) {
          try {
            record.invoice = this.invoiceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("invoice"));
            throw e;
          }
        } else {
          record.invoice = fieldSetFlags()[3] ? this.invoice : (io.neirth.nestedapi.schemas.InvoiceObj) defaultValue(fields()[3]);
        }
        record.token = fieldSetFlags()[4] ? this.token : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Request>
    WRITER$ = (org.apache.avro.io.DatumWriter<Request>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Request>
    READER$ = (org.apache.avro.io.DatumReader<Request>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.id);
    }

    if (this.email == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.email);
    }

    if (this.user == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.user.customEncode(out);
    }

    if (this.invoice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.invoice.customEncode(out);
    }

    if (this.token == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.token);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.email = null;
      } else {
        this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.user = null;
      } else {
        if (this.user == null) {
          this.user = new io.neirth.nestedapi.schemas.UserObj();
        }
        this.user.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.invoice = null;
      } else {
        if (this.invoice == null) {
          this.invoice = new io.neirth.nestedapi.schemas.InvoiceObj();
        }
        this.invoice.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.token = null;
      } else {
        this.token = in.readString(this.token instanceof Utf8 ? (Utf8)this.token : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.email = null;
          } else {
            this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.user = null;
          } else {
            if (this.user == null) {
              this.user = new io.neirth.nestedapi.schemas.UserObj();
            }
            this.user.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.invoice = null;
          } else {
            if (this.invoice == null) {
              this.invoice = new io.neirth.nestedapi.schemas.InvoiceObj();
            }
            this.invoice.customDecode(in);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.token = null;
          } else {
            this.token = in.readString(this.token instanceof Utf8 ? (Utf8)this.token : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










