/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.neirth.nestedapi.Authentication.Schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserObj extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6264652375902564514L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserObj\",\"namespace\":\"io.neirth.nestedapi.Authentication.Schemas\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"surname\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"password\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"telephone\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"birthday\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"addressInformation\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserObj> ENCODER =
      new BinaryMessageEncoder<UserObj>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserObj> DECODER =
      new BinaryMessageDecoder<UserObj>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserObj> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserObj> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserObj> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserObj>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserObj to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserObj from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserObj instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserObj fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Long id;
   private java.lang.CharSequence name;
   private java.lang.CharSequence surname;
   private java.lang.CharSequence email;
   private java.lang.CharSequence password;
   private java.lang.CharSequence telephone;
   private java.lang.CharSequence birthday;
   private java.lang.CharSequence country;
   private java.lang.CharSequence address;
   private java.lang.CharSequence addressInformation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserObj() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param surname The new value for surname
   * @param email The new value for email
   * @param password The new value for password
   * @param telephone The new value for telephone
   * @param birthday The new value for birthday
   * @param country The new value for country
   * @param address The new value for address
   * @param addressInformation The new value for addressInformation
   */
  public UserObj(java.lang.Long id, java.lang.CharSequence name, java.lang.CharSequence surname, java.lang.CharSequence email, java.lang.CharSequence password, java.lang.CharSequence telephone, java.lang.CharSequence birthday, java.lang.CharSequence country, java.lang.CharSequence address, java.lang.CharSequence addressInformation) {
    this.id = id;
    this.name = name;
    this.surname = surname;
    this.email = email;
    this.password = password;
    this.telephone = telephone;
    this.birthday = birthday;
    this.country = country;
    this.address = address;
    this.addressInformation = addressInformation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return surname;
    case 3: return email;
    case 4: return password;
    case 5: return telephone;
    case 6: return birthday;
    case 7: return country;
    case 8: return address;
    case 9: return addressInformation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: surname = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: password = (java.lang.CharSequence)value$; break;
    case 5: telephone = (java.lang.CharSequence)value$; break;
    case 6: birthday = (java.lang.CharSequence)value$; break;
    case 7: country = (java.lang.CharSequence)value$; break;
    case 8: address = (java.lang.CharSequence)value$; break;
    case 9: addressInformation = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'surname' field.
   * @return The value of the 'surname' field.
   */
  public java.lang.CharSequence getSurname() {
    return surname;
  }


  /**
   * Sets the value of the 'surname' field.
   * @param value the value to set.
   */
  public void setSurname(java.lang.CharSequence value) {
    this.surname = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'password' field.
   * @return The value of the 'password' field.
   */
  public java.lang.CharSequence getPassword() {
    return password;
  }


  /**
   * Sets the value of the 'password' field.
   * @param value the value to set.
   */
  public void setPassword(java.lang.CharSequence value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'telephone' field.
   * @return The value of the 'telephone' field.
   */
  public java.lang.CharSequence getTelephone() {
    return telephone;
  }


  /**
   * Sets the value of the 'telephone' field.
   * @param value the value to set.
   */
  public void setTelephone(java.lang.CharSequence value) {
    this.telephone = value;
  }

  /**
   * Gets the value of the 'birthday' field.
   * @return The value of the 'birthday' field.
   */
  public java.lang.CharSequence getBirthday() {
    return birthday;
  }


  /**
   * Sets the value of the 'birthday' field.
   * @param value the value to set.
   */
  public void setBirthday(java.lang.CharSequence value) {
    this.birthday = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'addressInformation' field.
   * @return The value of the 'addressInformation' field.
   */
  public java.lang.CharSequence getAddressInformation() {
    return addressInformation;
  }


  /**
   * Sets the value of the 'addressInformation' field.
   * @param value the value to set.
   */
  public void setAddressInformation(java.lang.CharSequence value) {
    this.addressInformation = value;
  }

  /**
   * Creates a new UserObj RecordBuilder.
   * @return A new UserObj RecordBuilder
   */
  public static io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder newBuilder() {
    return new io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder();
  }

  /**
   * Creates a new UserObj RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserObj RecordBuilder
   */
  public static io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder newBuilder(io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder other) {
    if (other == null) {
      return new io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder();
    } else {
      return new io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder(other);
    }
  }

  /**
   * Creates a new UserObj RecordBuilder by copying an existing UserObj instance.
   * @param other The existing instance to copy.
   * @return A new UserObj RecordBuilder
   */
  public static io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder newBuilder(io.neirth.nestedapi.Authentication.Schemas.UserObj other) {
    if (other == null) {
      return new io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder();
    } else {
      return new io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserObj instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserObj>
    implements org.apache.avro.data.RecordBuilder<UserObj> {

    private java.lang.Long id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence surname;
    private java.lang.CharSequence email;
    private java.lang.CharSequence password;
    private java.lang.CharSequence telephone;
    private java.lang.CharSequence birthday;
    private java.lang.CharSequence country;
    private java.lang.CharSequence address;
    private java.lang.CharSequence addressInformation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.surname)) {
        this.surname = data().deepCopy(fields()[2].schema(), other.surname);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.password)) {
        this.password = data().deepCopy(fields()[4].schema(), other.password);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.telephone)) {
        this.telephone = data().deepCopy(fields()[5].schema(), other.telephone);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.birthday)) {
        this.birthday = data().deepCopy(fields()[6].schema(), other.birthday);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.address)) {
        this.address = data().deepCopy(fields()[8].schema(), other.address);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.addressInformation)) {
        this.addressInformation = data().deepCopy(fields()[9].schema(), other.addressInformation);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing UserObj instance
     * @param other The existing instance to copy.
     */
    private Builder(io.neirth.nestedapi.Authentication.Schemas.UserObj other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.surname)) {
        this.surname = data().deepCopy(fields()[2].schema(), other.surname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.password)) {
        this.password = data().deepCopy(fields()[4].schema(), other.password);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.telephone)) {
        this.telephone = data().deepCopy(fields()[5].schema(), other.telephone);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.birthday)) {
        this.birthday = data().deepCopy(fields()[6].schema(), other.birthday);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.address)) {
        this.address = data().deepCopy(fields()[8].schema(), other.address);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.addressInformation)) {
        this.addressInformation = data().deepCopy(fields()[9].schema(), other.addressInformation);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'surname' field.
      * @return The value.
      */
    public java.lang.CharSequence getSurname() {
      return surname;
    }


    /**
      * Sets the value of the 'surname' field.
      * @param value The value of 'surname'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setSurname(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.surname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'surname' field has been set.
      * @return True if the 'surname' field has been set, false otherwise.
      */
    public boolean hasSurname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'surname' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearSurname() {
      surname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * @return The value.
      */
    public java.lang.CharSequence getPassword() {
      return password;
    }


    /**
      * Sets the value of the 'password' field.
      * @param value The value of 'password'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setPassword(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.password = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'password' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearPassword() {
      password = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'telephone' field.
      * @return The value.
      */
    public java.lang.CharSequence getTelephone() {
      return telephone;
    }


    /**
      * Sets the value of the 'telephone' field.
      * @param value The value of 'telephone'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setTelephone(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.telephone = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'telephone' field has been set.
      * @return True if the 'telephone' field has been set, false otherwise.
      */
    public boolean hasTelephone() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'telephone' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearTelephone() {
      telephone = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthday' field.
      * @return The value.
      */
    public java.lang.CharSequence getBirthday() {
      return birthday;
    }


    /**
      * Sets the value of the 'birthday' field.
      * @param value The value of 'birthday'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setBirthday(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.birthday = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'birthday' field has been set.
      * @return True if the 'birthday' field has been set, false otherwise.
      */
    public boolean hasBirthday() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'birthday' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearBirthday() {
      birthday = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.address = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearAddress() {
      address = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressInformation' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddressInformation() {
      return addressInformation;
    }


    /**
      * Sets the value of the 'addressInformation' field.
      * @param value The value of 'addressInformation'.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder setAddressInformation(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.addressInformation = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'addressInformation' field has been set.
      * @return True if the 'addressInformation' field has been set, false otherwise.
      */
    public boolean hasAddressInformation() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'addressInformation' field.
      * @return This builder.
      */
    public io.neirth.nestedapi.Authentication.Schemas.UserObj.Builder clearAddressInformation() {
      addressInformation = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserObj build() {
      try {
        UserObj record = new UserObj();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.surname = fieldSetFlags()[2] ? this.surname : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.password = fieldSetFlags()[4] ? this.password : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.telephone = fieldSetFlags()[5] ? this.telephone : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.birthday = fieldSetFlags()[6] ? this.birthday : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.address = fieldSetFlags()[8] ? this.address : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.addressInformation = fieldSetFlags()[9] ? this.addressInformation : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserObj>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserObj>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserObj>
    READER$ = (org.apache.avro.io.DatumReader<UserObj>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.id);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.surname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.surname);
    }

    if (this.email == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.email);
    }

    if (this.password == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.password);
    }

    if (this.telephone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.telephone);
    }

    if (this.birthday == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.birthday);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.country);
    }

    if (this.address == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address);
    }

    if (this.addressInformation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.addressInformation);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.surname = null;
      } else {
        this.surname = in.readString(this.surname instanceof Utf8 ? (Utf8)this.surname : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.email = null;
      } else {
        this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.password = null;
      } else {
        this.password = in.readString(this.password instanceof Utf8 ? (Utf8)this.password : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.telephone = null;
      } else {
        this.telephone = in.readString(this.telephone instanceof Utf8 ? (Utf8)this.telephone : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.birthday = null;
      } else {
        this.birthday = in.readString(this.birthday instanceof Utf8 ? (Utf8)this.birthday : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.address = null;
      } else {
        this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.addressInformation = null;
      } else {
        this.addressInformation = in.readString(this.addressInformation instanceof Utf8 ? (Utf8)this.addressInformation : null);
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.surname = null;
          } else {
            this.surname = in.readString(this.surname instanceof Utf8 ? (Utf8)this.surname : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.email = null;
          } else {
            this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.password = null;
          } else {
            this.password = in.readString(this.password instanceof Utf8 ? (Utf8)this.password : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.telephone = null;
          } else {
            this.telephone = in.readString(this.telephone instanceof Utf8 ? (Utf8)this.telephone : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.birthday = null;
          } else {
            this.birthday = in.readString(this.birthday instanceof Utf8 ? (Utf8)this.birthday : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address = null;
          } else {
            this.address = in.readString(this.address instanceof Utf8 ? (Utf8)this.address : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addressInformation = null;
          } else {
            this.addressInformation = in.readString(this.addressInformation instanceof Utf8 ? (Utf8)this.addressInformation : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










